#!/usr/bin/env python
# -*- coding: utf-8 -*-

from imapclient import IMAPClient
import pyzmail,time,pickle

class Imapmail(object):
    def __init__(self):  # 初始化数据
        self.serveraddress = None
        self.user = None
        self.passwd = None
        self.prot = None
        self.ssl = None
        self.timeout = None
        #self.savepath = None
        self.server = None
        self.result=list()
        self.size=0
        self.white_list=['0']
        self.black_list=['0']

        pickle_file_white = open('white_list.pkl', 'wb')
        pickle.dump(self.white_list, pickle_file_white)
        pickle_file_white.close()
        pickle_file_black = open('black_list.pkl', 'wb')
        pickle.dump(self.black_list, pickle_file_black)
        pickle_file_black.close()

        pickle_file_white = open('white_list.pkl', 'rb')
        my_list = pickle.load(pickle_file_white)
        pickle_file_black = open('black_list.pkl', 'rb')
        my_list = pickle.load(pickle_file_black)
    def client(self):  # 链接
        try:
            self.server = IMAPClient(self.serveraddress, self.prot, self.ssl, timeout=self.timeout)
            return self.server
        except BaseException as e:
            return "ERROR: >>> " + str(e)

    def login(self):  # 认证
        try:
            self.server.login(self.user, self.passwd)
        except BaseException as e:
            return "ERROR: >>> " + str(e)
    def getmaildir(self):  # 获取目录列表 [((), b'/', 'INBOX'), ((b'\\Drafts',), b'/', '草稿箱'),]
        dirlist = self.server.list_folders()
        return dirlist
    def getresult(self):
        self.server.select_folder('INBOX', readonly=True)  # 选择目录 readonly=True 只读,不修改,这里只选择了 收件箱
        self.result = self.server.search()  # 获取所有邮件总数目 [1,2,3,....]
        self.size=len(self.result)
    def getnewmail(self):  # 监听最新邮件
        count = 0
        self.getresult()
        previous=len(self.result)
        while True:
            count=len(self.result)-previous
            if(count==0):
                print('邮件总数:' + str(self.size))
            else:
                print('邮件总数:' + str(self.size))
                for _sm in self.result[previous:self.size]:
                    data = self.server.fetch(_sm, ['ENVELOPE'])
                    envelope = data[_sm][b'ENVELOPE']
                    dates = envelope.date
                    msgdict = self.server.fetch(_sm, ['BODY[]'])  # 获取邮件内容
                    mailbody = msgdict[_sm][b'BODY[]']  # 获取邮件内容
                    messageObj = pyzmail.PyzMessage.factory(mailbody)
                    subject=messageObj.get_subject()
                    send=str(messageObj.get_addresses('from')[0][1])
                    sendtime=str(dates)
                    print("主题：" + subject)
                    print('发件人：' + send)
                    print('时间：' + sendtime)
                    print('主要内容：')
                    if(messageObj.text_part!=None):
                        messageContent = messageObj.text_part.get_payload().decode(messageObj.text_part.charset)
                        print(messageContent)
                    elif(messageObj.html_part!=None):
                        messageContent = messageObj.html_part.get_payload().decode(messageObj.text_part.charset)
                        print(messageContent)
                    if (send in self.white_list):
                        pass
                    elif (send in self.black_list):
                        print('来自' + send + '的垃圾邮件')
                        print('邮件主题为', subject)
                    else:
                        #由公共黑名单或者公共黑名单进行判断
                        pass
                    previous = self.size
            time.sleep(5)
            self.getresult()
        #with open(self.savepath + str(_sm), 'wb') as f:  # 存放邮件内容
        #f.write(mailbody)
    def getallmails(self):
        self.getresult()
        for _sm in self.result:
            data = self.server.fetch(_sm, ['ENVELOPE'])
            envelope = data[_sm][b'ENVELOPE']
            dates = envelope.date
            msgdict = self.server.fetch(_sm, ['BODY[]'])  # 获取邮件内容
            mailbody = msgdict[_sm][b'BODY[]']  # 获取邮件内容
            messageObj = pyzmail.PyzMessage.factory(mailbody)
            #print("主题：" + messageObj.get_subject())
            subject=messageObj.get_subject()
            send=str(messageObj.get_addresses('from')[0][1])
            #print('发件人：' + str(messageObj.get_addresses('from')[0][1]))
            if(send in self.white_list):pass
            elif(send in self.black_list):
                print('来自'+send+'的垃圾邮件')
                print('邮件主题为',subject)
            else:
                #由公共黑名单或者公共黑名单进行判断
                pass
            # print('时间：' + str(dates))
            # print('主要内容：')
            # if (messageObj.text_part != None):
            #     messageContent = messageObj.text_part.get_payload().decode(messageObj.text_part.charset)
            #     print(messageContent)
            # elif (messageObj.html_part != None):
            #     messageContent = messageObj.html_part.get_payload().decode(messageObj.text_part.charset)
            #     print(messageContent)
    def close(self):
        self.server.close()
    def addwhite(self,name):
        if name not in self.white_list:
            self.white_list.append(name)
            pickle_file=open('white_list.pkl','wb')
            pickle.dump(self.white_list, pickle_file)
            pickle_file.close()
    def addbalck(self,name):
        if name not in self.black_list:
            self.black_list.append(name)
            pickle_file = open('white_list.pkl', 'wb')
            pickle.dump(self.black_list, pickle_file)
            pickle_file.close()
if __name__ == "__main__":
    imap = Imapmail()
    imap.user = "1146433856@qq.com"  # 邮箱账号
    imap.passwd = "qbotfaegocxsgagf"  # 邮箱密码
    imap.serveraddress = 'imap.'+imap.user.split('@')[-1]# 邮箱地址

    #imap.savepath = ""  # 邮件存放路径
    imap.client()
    imap.login()
    imap.addbalck('1146433856@qq.com')
    imap.getallmails()
    imap.getnewmail()
    #imap.close()